import requests
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

class GoogleSearchAPI:
    def __init__(self):
        # Load API key and Search Engine ID from environment variables
        self.api_key = os.getenv("GOOGLE_API_KEY")
        self.search_engine_id = os.getenv("SEARCH_ENGINE_ID")
        self.base_url = "https://www.googleapis.com/customsearch/v1"  # Base URL for Google Custom Search

    def search(self, query: str, count: int = 10) -> List[Dict]:
        """
        Perform a search using Google Search API and return a list of results.
        
        :param query: The search query.
        :param count: The number of results to return (default is 10).
        :return: A list of search results, each a dictionary containing title, URL, and a snippet.
        """
        params = {
            "key": self.api_key,
            "cx": self.search_engine_id,
            "q": query,
            "num": count
        }
        response = requests.get(self.base_url, params=params)

        if response.status_code != 200:
            raise Exception(f"Failed to fetch search results: {response.text}")

        search_results = response.json().get("items", [])

        formatted_results = [
            {
                "title": result["title"],
                "url": result["link"],
                "snippet": result.get("snippet", "")
            } for result in search_results
        ]

        return formatted_results

# Example usage of the class
if __name__ == "__main__":
    google_search = GoogleSearchAPI()
    try:
        results = google
    _search.search("Latest technology trends")
for result in results:
print(f"Title: {result['title']}\nURL: {result['url']}\nSnippet: {result['snippet']}\n")
except Exception as e:
print(str(e))
                                                   
